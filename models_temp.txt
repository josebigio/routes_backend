from app import db
from sqlalchemy.dialects.postgresql import JSON


class Agency(db.Model):
    __tablename__ = 'gtfs_agency'

    agency_id = db.Column(db.Integer, primary_key=True)
    agency_name = db.Column(db.String())
    agency_url = db.Column(db.String())
    agency_timezone = db.Column(db.String())
    agency_lang = db.Column(db.String())
    agency_phone = db.Column(db.String())
    agency_fare_url = db.Column(db.String())

    def __repr__(self):
        return '<id {}>'.format(self.agency_id)


class CalendarDates(db.Model):
    __tablename__ = 'gtfs_calendar_dates'

    service_id = db.Column(db.Integer, primary_key=True)
    exception_date = db.Column(db.Date(), primary_key=True)
    exception_type = db.Column(db.Integer, primary_key=True)

    def __repr__(self):
        return '<id {}>'.format(self.service_id)


class Routes(db.Model):
    __tablename__ = 'gtfs_routes'

    route_id = db.Column(db.Integer, primary_key=True)
    agency_id = db.Column(db.Integer, db.ForeignKey('gtfs_agency.agency_id'), nullable=True)
    #agency_id = db.Column(db.Integer, nullable=True)
    route_short_name = db.Column(db.String())
    route_long_name = db.Column(db.String())
    route_desc = db.Column(db.String())
    route_type = db.Column(db.Integer)
    route_url = db.Column(db.String())
    route_color = db.Column(db.String())
    route_text_color = db.Column(db.String())

    agency = db.relation(Agency)
    trips = db.relation('Trips', lazy='dynamic')

    def __repr__(self):
        return '<id {}>'.format(self.route_id)


class Stops(db.Model):
    __tablename__ = 'gtfs_stops'

    stop_id = db.Column(db.Integer, primary_key=True)
    stop_code = db.Column(db.String())
    stop_name = db.Column(db.String())
    stop_desc = db.Column(db.String())
    stop_lat = db.Column(db.Float())
    stop_lon = db.Column(db.Float())
    zone_id = db.Column(db.Float())
    stop_url = db.Column(db.Float())
    location_type = db.Column(db.Integer)
    parent_station = db.Column(db.Integer)
    stop_timezone = db.Column(db.String())
    wheelchair_boarding = db.Column(db.Boolean)

    def __repr__(self):
        return '<id {}>'.format(self.stop_id)


class Trips(db.Model):
    __tablename__ = 'gtfs_trips'

    trip_id = db.Column(db.Integer,  primary_key=True)
    route_id = db.Column(db.Integer, db.ForeignKey('gtfs_routes.route_id'), nullable=False)
    service_id  = db.Column(db.Integer, db.ForeignKey('gtfs_calendar_dates.service_id'), nullable=False)
    #route_id = db.Column(db.Integer)
    #service_id  = db.Column(db.Integer)
    trip_headsign = db.Column(db.String())
    trip_short_name = db.Column(db.String())
    direction_id = db.Column(db.Integer)
    block_id = db.Column(db.Integer)
    #shape_id = db.Column(db.Integer)
    shape_id = db.Column(db.Integer, db.ForeignKey('gtfs_shapes.shape_id'), nullable=True)
    wheelchair_accessible = db.Column(db.Boolean)
    bikes_allowed = db.Column(db.Boolean)

    route = db.relation(Routes)
    service = db.relation(CalendarDates)
    stops = db.relation('StopTimes', order_by=lambda: StopTimes.stop_sequence)

    def __repr__(self):
        return '<id {}>'.format(self.route_id)


class StopTimes(db.Model):
    __tablename__ = 'gtfs_stop_times'

    #trip_id = db.Column(db.Integer, primary_key=True)
    trip_id = db.Column(db.Integer, db.ForeignKey('gtfs_trips.trip_id'), primary_key=True)
    arrival_time = db.Column(db.String())
    departure_time = db.Column(db.String())
    #stop_id = db.Column(db.Integer, primary_key=True)
    stop_id = db.Column(db.Integer, db.ForeignKey('gtfs_stops.stop_id'), primary_key=True)
    stop_sequence = db.Column(db.Integer, primary_key=True)
    stop_headsign = db.Column(db.String())
    pickup_type = db.Column(db.String())
    drop_off_type = db.Column(db.String())
    shape_dist_traveled = db.Column(db.Float())

    trip = db.relation(Trips)
    stop = db.relation(Stops)

    def __repr__(self):
        return '<id {}>'.format(self.trip_id)


class Shapes(db.Model):
    __tablename__ = 'gtfs_shapes'

    _id = db.Column(db.Integer, primary_key=True)

    shape_id = db.Column(db.Integer)
    shape_pt_lat = db.Column(db.Float())
    shape_pt_lon = db.Column(db.Float())
    shape_pt_sequence = db.Column(db.Integer)
    shape_dist_traveled = db.Column(db.Float())

    def __repr__(self):
        return '<id {}>'.format(self.shape_id)


class Calendar(db.Model):
    __tablename__ = 'gtfs_calendar'

    service_id = db.Column(db.Integer, primary_key=True)
    monday = db.Column(db.Integer)
    tuesday = db.Column(db.Integer)
    wednesday = db.Column(db.Integer)
    thursday = db.Column(db.Integer)
    friday = db.Column(db.Integer)
    saturday = db.Column(db.Integer)
    sunday = db.Column(db.Integer)
    start_date = db.Column(db.Date())
    end_date = db.Column(db.Date())

    def __repr__(self):
        return '<id {}>'.format(self.service_id)